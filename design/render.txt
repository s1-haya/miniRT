シーン全体を描画（イベントの処理（赤いボタンを押すなど）で終了）
void	render_scene(t_scene *scene)
{
	レイトレーシングによって得た描画情報を取得
	void draw_img_with_ray_tracing(t_scene *scene);
	描画情報を画面に表示
	int mlx_put_image_to_window　(void *mlx_ptr, void *win_ptr, void *img_ptr, int x, int y)
	イベントを処理する関数
	int	mlx_loop (void *mlx_ptr);
}

レイトレーシングによって得た描画情報を取得
void draw_img_with_ray_tracing(t_scene *scene)
{
	座標を取得
	{
		レイと物体の交点を決める（出力　一番視点との距離が近い物体）
		t_shape	*determine_intersection_ray_and_object(t_shape **shape, t_ray ray, double light_source_distance, bool exit)
		描画情報を取得（色をつけるなど）

	}
}

レイと物体の交点を決める（出力　一番視点との距離が近い物体）
t_shape	*determine_intersection_ray_and_object(t_shape **shape, t_ray ray, double light_source_distance, bool exit)
{
	複数の物体
	{
		レイ（視点とスクリーンの距離）を取得
		t_ray new_ray(t_vector point, t_vector direction)
		レイと物体の交点情報を取得
		t_intersection *new_intersection(t_ray ray)
		物体同士の視点から交点までの距離を判定
	}
}

描画情報を取得（色をつけるなど）
void　put_color_to_img(t_scene *scene, t_shape *nearest_shape, int x, int y)
物体の交点がある場合
	ある場合　
		色の情報を取得する関数(t_shape **shape, t_shape *nearest_shape, t_light *light)
		void my_mlx_pixel_put(t_img *img_data, int x, int y, int color)
	ない場合　スキップ

int 色の情報を取得する関数
int (t_shape **shape, t_shape *nearest_shape, t_light *light)
光源が複数ある場合(各光源ごとの入射角、法線ベクトルを取得)
{
	入射角、法線ベクトル作成
	交点と光源との間に他の物体を判定
	影をつける関数
	has_shadowt(shape **shape, t_ray shade_ray, double distance)
	  ある場合
	　  影をつける
	  ない場合
	　  放射輝度（環境光+鏡面反射光+拡散反射光）を取得
		get_radiance(t_camera view_point, void *shape, t_light light)
}
return (放射輝度を色へと変換)

